pipeline {
    agent any 
    stages {
        stage('Compile and Build  (Maven)') { 
            steps {
                sh "mvn clean compile"
            }
        }
       

        stage('Deploy to Dev   (Docker)') { 
            steps {
                sh "mvn package"
                sh 'docker build -t  icatdocker/docker_jenkins_springboot:${BUILD_NUMBER} .'
                  withCredentials([string(credentialsId: 'Dockerid', variable: 'Dockerpwd')]) {
                sh "docker login -u icatdocker -p ${Dockerpwd}"
                sh 'docker push icatdocker/docker_jenkins_springboot:${BUILD_NUMBER}'
                sh 'docker rm -f $(docker ps -a -q)'
                sh 'docker run -itd -p  8081:8080 icatdocker/docker_jenkins_springboot:${BUILD_NUMBER}'
            }
        }
    }

        	 stage('Functional Testing   (Selenium)'){
	  steps {
	      //   echo "test"
              //   git 'https://github.com/simitaws/Selenium-Course.git'
	     //    script {
		//        sh (/mvn clean test/)
		//	    }
	            }
	        }

    stage(' Security Testing (SonarQube)'){


steps {

git 'https://github.com/cwelland1/SpringbootJenkinsBuild.git'
withSonarQubeEnv('SonarQube')
 {


bat "mvn clean package sonar:sonar -Dsonar.login=cfb1a2c3b5624f88fc689d4027cb1e564f463039"


}


}


}


        stage('Deploy to UAT  (Docker)'){
            steps {
             echo "test"
            }
        }

        
        stage('Archving (Jenkins)') { 
            steps {
                 archiveArtifacts '**/target/*.jar'
            }
        }
    }
}

